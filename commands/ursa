#!/usr/bin/env bash

# Function to detect parent block device
ursa_detect () {
    # Determine current command location
    if [ $(command -v realpath) ]; then
        root_directory=$(readlink -f "${BASH_SOURCE[0]}" | xargs realpath | xargs dirname)
    else
        root_directory=$(cd "$(dirname $BASH_SOURCE[0])" ; pwd -P)
    fi

    # Determine block devices to operate on
    u_volume=$(df $root_directory | grep /dev/ | cut -d ' ' -f1)
    u_root=${u_volume%?}

    # Return the root
    echo ${u_root}
}

# Function to detach block device
ursa_detach () {
    echo "Powering-off ${1}..."
    udisksctl power-off -b ${1}
}

# Function to cleanup mount directories
ursa_cleanup () {
    echo "Unmounting vaults"
    if mountpoint -q /mnt/vault-a; then
        echo "Vault 'a' still mounted! Please unmount first."
    else
        sudo rm -rf /mnt/vault-a
    fi
    if mountpoint -q /mnt/vault-b; then
        echo "Vault 'b' still mounted! Please unmount first."
    else
        sudo rm -rf /mnt/vault-b
    fi
    if mountpoint -q /mnt/vault-c; then
        echo "Vault 'c' still mounted! Please unmount first."
    else
        sudo rm -rf /mnt/vault-c
    fi
}

# Function to mount the vaults
ursa_mount () {
    # Unlock vaults
    echo "Opening vault-a on ${1}3..."
    sudo cryptsetup open ${1}3 vault-a
    echo "Opening vault-b on ${1}4..."
    sudo cryptsetup open ${1}4 vault-b
    echo "Opening vault-c on ${1}5..."
    sudo cryptsetup open ${1}5 vault-c

    # Mount vaults to directories
    echo "Creating mount directories..."
    sudo mkdir /mnt/vault-a /mnt/vault-b /mnt/vault-c
    echo "Mounting vault-a, vault-b, vault-c..."
    sudo mount /dev/mapper/vault-a /mnt/vault-a
    sudo mount /dev/mapper/vault-b /mnt/vault-b
    sudo mount /dev/mapper/vault-c /mnt/vault-c
}

# Function to unmount the vaults
ursa_unmount () {
    # Unmount vaults
    echo "Unmounting vault directories..."
    sudo umount /mnt/vault-a
    sudo umount /mnt/vault-b
    sudo umount /mnt/vault-c

    # Close vaults
    echo "Closing vault-a, vault-b, and vault-c..."
    sudo cryptsetup close vault-a
    sudo cryptsetup close vault-b
    sudo cryptsetup close vault-c

    # Unmount home volume
    echo "Unmounting live partition..."
    udisksctl unmount -b ${1}2
}

# Function to access the vaults
ursa_access () {
    # Determine the root
    u_root=$(ursa_detect)

    # Mount vaults
    ursa_mount ${u_root}

    # Open the most recently updated vault with default file managers
    vault_a_time=$(stat -c "%Y" /mnt/vault-a)
    vault_b_time=$(stat -c "%Y" /mnt/vault-b)
    vault_c_time=$(stat -c "%Y" /mnt/vault-c)
    if (( vault_a_time > vault_b_time )); then
        if (( vault_a_time > vault_c_time )); then
            vault_recent=/mnt/vault-a
        else
            vault_recent=/mnt/vault-c
        fi
    else
        if (( vault_b_time > vault_c_time )); then
            vault_recent=/mnt/vault-b
        else
            vault_recent=/mnt/vault-c
        fi
    fi

    # Set the vault directory
    export URSA_VAULT_DIR=$vault_recent

    # Start graphical session
    startxfce4
}

# Function to prepare vaults for backup
ursa_backup () {
    # Determine the root
    if [ -z "$1" ]; then
        echo "Please specify a block device!"
        exit 1
    else
        u_root=$1
    fi

    # Mount vaults
    ursa_mount ${u_root}

    # Open the most recently updated vault with default file managers
    vault_a_time=$(stat -c "%Y" /mnt/vault-a)
    vault_b_time=$(stat -c "%Y" /mnt/vault-b)
    vault_c_time=$(stat -c "%Y" /mnt/vault-c)
    if (( vault_a_time > vault_b_time )); then
        if (( vault_a_time > vault_c_time )); then
            vault_recent=/mnt/vault-a
        else
            vault_recent=/mnt/vault-c
        fi
    else
        if (( vault_b_time > vault_c_time )); then
            vault_recent=/mnt/vault-b
        else
            vault_recent=/mnt/vault-c
        fi
    fi

    echo "Opening the vault directories..."
    xdg-open $vault_recent
}

# Function to perform integrity refresh
ursa_refresh () {
    # Determine the root
    if [ -z "$1" ]; then
        echo "Please specify a block device!"
        exit 1
    else
        u_root=$1
    fi

    # Mount vaults
    ursa_mount ${u_root}

    # Determine the source and destination volumes
    vault_a_time=$(stat -c "%Y" /mnt/vault-a)
    vault_b_time=$(stat -c "%Y" /mnt/vault-b)
    vault_c_time=$(stat -c "%Y" /mnt/vault-c)
    if (( vault_a_time > vault_b_time )); then
        if (( vault_a_time > vault_c_time )); then
            vault_source=/mnt/vault-a
            if (( vault_b_time > vault_c_time )); then
                vault_dest=/mnt/vault-c
            else
                vault_dest=/mnt/vault-b
            fi
        else
            vault_source=/mnt/vault-c
            if (( vault_a_time > vault_b_time )); then
                vault_dest=/mnt/vault-b
            else
                vault_dest=/mnt/vault-a
            fi
        fi
    else
        if (( vault_b_time > vault_c_time )); then
            vault_source=/mnt/vault-b
            if (( vault_a_time > vault_c_time )); then
                vault_dest=/mnt/vault-c
            else
                vault_dest=/mnt/vault-a
            fi
        else
            vault_source=/mnt/vault-c
            if (( vault_a_time > vault_b_time )); then
                vault_dest=/mnt/vault-b
            else
                vault_dest=/mnt/vault-a
            fi
        fi
    fi

    # Initiate backup
    rm -rf ${vault_dest}/*
    cp -R ${vault_source}/* ${vault_dest}

    # Create markers (timestamp)
    date > ${vault_dest}/.ursa-tag

    # Umount, and detach
    ursa_remove $@
}

# Function to remove the storage drive
ursa_remove () {
    # Determine the root
    if [ -z "$1" ]; then
        u_root=$(ursa_detect)
    else
        u_root=$1
    fi

    # Unmount, detach, clean up
    echo "Removing ${u_root}..."
    ursa_unmount ${u_root}
    ursa_cleanup
    ursa_detach ${u_root}
}

# Main entry point to the program
main () {
    local cmd="${1:-}"
    shift

    case "${cmd}" in
        a | access)
            ursa_access $@
            ;;

        b | backup)
            ursa_backup $@
            ;;

        g | refresh)
            ursa_refresh $@
            ;;

        r | remove)
            ursa_remove $@
            ;;

        *)
            echo "Please use either of the following:"
            echo "1. ursa access"
            echo "2. ursa backup"
            echo "3. ursa refresh"
            echo "4. ursa remove"
            ;;
    esac
}

# Start
main $@
